from zoo.tree_utils.collapse import collapse, read_tree_file

def parse_args():
    """ Parses command line arguments """
    import argparse

    help_msgs = dict(tree='REQUIRED: path to the tree file',
                     threshold=('OPTIONAL: support value threshold - '
                                'nodes with support below this value will be collapsed. DEFAULT=%(default)s'),
                     length_threshold=('OPTIONAL: edge length threshold - '
                                       'edges shorter than this value will be collapsed. DEFAULT=%(default)f'),
                     format='OPTIONAL: file format of the input tree - can be newick or nexus. DEFAULT=%(default)s',
                     keep_lengths=('OPTIONAL: if set, add the length of the branch being removed to the child branches,'
                                   ' so that root-to-tip distances are preserved. DEFAULT=%(default)s'),
                     outfile='OPTIONAL: write the result to disk. DEFAULT=print to terminal',
                     support_key=('OPTIONAL: the key that retrieves the support value, if the support value'
                                  ' is given in some extended newick format (i.e. as key-value pair inside a comment)'),
                     output_format=('OPTIONAL: file format of output tree - newick or nexus. DEFAULT: same as input.'
                                    ' CAVEAT: nexus format may be incompatible with FigTree'))
    parser = argparse.ArgumentParser()
    parser.add_argument('tree', type=str, help=help_msgs['tree'])
    parser.add_argument('--threshold', type=float, default=0.5, help=help_msgs['threshold'])
    parser.add_argument('--length_threshold', type=float, default=0.0001, help=help_msgs['length_threshold'])
    parser.add_argument('--format', type=str, default='newick',
                        choices=['nexus', 'newick'], help=help_msgs['format'])
    parser.add_argument('--output_format', type=str, help=help_msgs['output_format'])
    parser.add_argument('--keep_lengths', action='store_true', help=help_msgs['keep_lengths'])
    parser.add_argument('--outfile', type=str, help=help_msgs['outfile'])
    parser.add_argument('--support_key', type=str, help=help_msgs['support_key'])
    return parser.parse_args()


def get_file_handle(outfile):
    if outfile == 'stdout' or outfile is None:
        return sys.stdout
    else:
        return open(outfile, 'w')

def main():
    args = parse_args()
    if args.output_format is None:
        args.output_format = args.format
    if args.test:
        return test()
    tree = read_tree_file(args.tree, args.format)
    collapsed_tree = collapse(tree, args.threshold, args.keep_lengths, args.support_key, args.length_threshold)
    with get_file_handle(args.outfile) as handle:
        collapsed_tree.write(file=handle, schema=args.output_format, suppress_rooting=True)


if __name__ == '__main__':
    sys.exit(main())
